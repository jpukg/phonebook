<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:mail="http://www.springframework.org/schema/integration/mail"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/integration
                                 http://www.springframework.org/schema/integration/spring-integration.xsd
                                 http://www.springframework.org/schema/integration/mail
                                 http://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd
                                 http://www.springframework.org/schema/context
                                 http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:mail.properties"/>

    <gateway id="resetPasswordService"
             service-interface="it.valeriovaudi.service.PasswordService">
        <method name="createNonce"
                request-channel="createNonceServiceMainRequestChannel"
                reply-channel="createNonceServiceMainResponseChannel"
                payload-expression="#args[0]" >
            <header name="mail" expression="#args[1]"/>
        </method>

        <method name="resetPassword"
                request-channel="restetPasswordServiceMainRequestChannel"
                reply-channel="singUpPhoneBoockUserMainResponseChannel"
                payload-expression="#args[1]">
            <header name="password" expression="#args[0]"/>
        </method>
    </gateway>

    <!--create nonce pipeline-->
    <!--<channel id="createNonceServiceMainRequestChannel"/>-->
    <publish-subscribe-channel id="createNonceServiceMainResponseChannel"/>

    <chain id="createNonceChain"
            input-channel="createNonceServiceMainRequestChannel"
            output-channel="createNonceServiceMainResponseChannel">
        <service-activator expression="@phonBookUserRepository.findByUserName(payload)" requires-reply="true"/>
        <service-activator expression="@nonceFactoryByUser.getNonce(payload)" requires-reply="true"/>
        <service-activator expression="@nonceRepository.save(payload).nonce" requires-reply="true"/>
    </chain>


    <chain id="createNonceSendMailChain"
           input-channel="createNonceServiceMainResponseChannel">
        <service-activator expression="T(java.lang.String).format('${mail.resetpassword.messageformat}' ,payload)" requires-reply="true"/>
        <mail:header-enricher>
            <mail:from value="${mail.admin}"/>
            <mail:to expression="headers['mail']"/>
            <mail:subject value="${mail.resetpassword.subject}"/>
        </mail:header-enricher>
        <mail:outbound-channel-adapter mail-sender="mailSender"/>
    </chain>

    <!--reset password pipeline-->
    <!--<channel id="restetPasswordServiceMainRequestChannel"/>-->

    <chain id="resetPasswordChain"
            input-channel="restetPasswordServiceMainRequestChannel"
            output-channel="singUpPhoneBoockUserMainResponseChannel">
        <!--find the nonce in the repository-->
        <service-activator  expression="@nonceRepository.findByNonce(payload)" requires-reply="true"/>
        <!--the router if nonce is acceptable continue in the pipeline, otherwise  discards the message-->
        <filter ref="acceptableNonceFilter"/>

        <service-activator ref="invalidateNonce"  requires-reply="true"/>
        <service-activator expression="@phonBookUserRepository.findByUserName(payload.userName)" requires-reply="true"/>
        <service-activator expression="T(it.valeriovaudi.builder.PhoneBookUserBuilder).newPhoneBookUserBuilderByPhoneBookUser(payload).buildPassword(headers['password']).buildPhoneBookUser()" requires-reply="true"/>
        <service-activator expression="@phonBookUserRepository.save(payload)" requires-reply="true"/>
    </chain>


</beans:beans>
